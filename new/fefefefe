import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.sse.EventSource;
import okhttp3.sse.EventSources;

// Define your SSE endpoint URL
String sseUrl = "https://example.com/sse-endpoint";

// Create an OkHttpClient
OkHttpClient client = new OkHttpClient();

// Create an SSE request
Request request = new Request.Builder()
        .url(sseUrl)
        .build();

// Set up the EventSource
EventSource eventSource = EventSources.createFactory(client)
        .newEventSource(request, new EventSourceListener() {
            @Override
            public void onEvent(EventSource eventSource, String id, String type, String data) {
                // Handle SSE events here
                log.info("Received SSE event: ID={}, Type={}, Data={}", id, type, data);
                // Add your custom logic to process the data
            }

            @Override
            public void onFailure(EventSource eventSource, Throwable t, Response response) {
                // Handle failure (e.g., connection closed, errors)
                log.error("SSE connection failed: {}", t.getMessage());
            }
        });

// Start listening to SSE events
eventSource.start();

// Wait for some time (e.g., simulate a test duration)
// You can adjust this based on your test scenario
Thread.sleep(60000); // Wait for 60 seconds

// Clean up and close the EventSource
eventSource.close();



Make sure you’ve added the okhttp-eventsource library (compatible with OkHttp 4.x) to JMeter’s classpath. This code snippet should work seamlessly with Java 17 and JMeter. Happy testing! 
