// Import statements
import com.squareup.okhttp.*
import com.squareup.okhttp.sse.EventSource
import com.squareup.okhttp.sse.EventSourceListener
import com.squareup.okhttp.sse.EventSources

// Variable definitions
def url = vars.get("url") // Get the SSE service URL from a JMeter variable
def client = new OkHttpClient() // Create a HTTP client object
def request = new Request.Builder().url(url).build() // Create a HTTP request object
def eventSource = EventSources.createFactory(client).newEventSource(request, new EventSourceListener() { // Create an event source object and register a listener
    @Override
    void onOpen(EventSource eventSource, Response response) {
        log.info("Connection opened") // Log the connection status to the console
    }

    @Override
    void onEvent(EventSource eventSource, String id, String type, String data) {
        log.info("Event received: id=${id}, type=${type}, data=${data}") // Log the event details to the console
        vars.put("eventData", data) // Save the event data as a JMeter variable
    }

    @Override
    void onClosed(EventSource eventSource) {
        log.info("Connection closed") // Log the connection status to the console
    }

    @Override
    void onFailure(EventSource eventSource, Throwable t, Response response) {
        log.error("Connection failed: ${t.message}") // Log the connection error to the console
    }
})

// Wait for the specified duration
sleep(vars.get("duration") as long)

// Close the event source
eventSource.close()



// Import statements
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.SSLContext
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager

// Create a trust manager that does not validate certificate chains
def nullTrustManager = [
  checkClientTrusted: { chain, authType -> },
  checkServerTrusted: { chain, authType -> },
  getAcceptedIssuers: { null }
]

// Create a hostname verifier that always returns true
def nullHostnameVerifier = [
  verify: { hostname, session -> true }
]

// Install the null trust manager and hostname verifier
SSLContext sc = SSLContext.getInstance("SSL")
sc.init(null, [nullTrustManager as X509TrustManager] as TrustManager[], null)
HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory())
HttpsURLConnection.setDefaultHostnameVerifier(nullHostnameVerifier as HostnameVerifier)


