import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.ConnectionErrorHandler;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import okhttp3.OkHttpClient;
import com.launchdarkly.eventsource.ReadyState;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.time.Duration;
import java.nio.charset.StandardCharsets;
import java.net.*;
import com.launchdarkly.eventsource.ConnectionErrorHandler.Action;
import org.slf4j.Logger;
import java.util.UUID;

public class SimpleEventHandler implements EventHandler {
    private Logger log;
    private String taskId;
    private long postInterval; // Time interval (in milliseconds) after which to send the POST request
    private int eventCount = 0; // Count of events received within the 2-minute window
    private long windowStartTime; // Start time of the 2-minute window

    // Constructor with configurable postInterval
    public SimpleEventHandler(Logger log, String taskId, long postInterval){
        this.log = log;
        this.taskId = taskId;
        this.postInterval = postInterval;
        this.windowStartTime = System.currentTimeMillis();
    }

    public void onOpen() throws Exception{
        log.info("SSE Connection Opened");
    }

    public void onClosed() throws Exception{
        log.info("SSE Connection Closed");
    }

    public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
        // Log the time when each event is received in seconds
        long currentTime = System.currentTimeMillis();
        log.info("Received: "+ messageEvent.getData() + " at " + currentTime);

        // Increment event count
        eventCount++;

        // Check if 2 minutes have elapsed since the start of the window
        if (currentTime - windowStartTime >= 2 * 60 * 1000) {
            // If 2 minutes have elapsed, check if the event count is greater than 5
            if (eventCount > 5) {
                sendPostRequest(taskId); // Send POST request if event count is greater than 5
            }
            // Reset event count and window start time for the next 2-minute window
            eventCount = 0;
            windowStartTime = currentTime;
        }
    }

    public void onComment(String comment) throws Exception{
        log.info(comment);
    }

    public void onError(Throwable t){
        log.info("Error "+t);
    }

    // Method to generate a random UUID
    private String generateRandomUUID() {
        UUID uuid = UUID.randomUUID();
        return uuid.toString();
    }

    // Method to send the POST request
    private void sendPostRequest(String taskId) {
        // Implementation remains the same as before...
    }
}

// Rest of the code remains unchanged...
