import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.ConnectionErrorHandler;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import okhttp3.OkHttpClient;
import com.launchdarkly.eventsource.ReadyState;
import java.net.URI;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.time.Duration;
import java.nio.charset.StandardCharsets;
import java.net.*;
import com.launchdarkly.eventsource.ConnectionErrorHandler.Action;
import org.slf4j.Logger;
import java.util.UUID;

public class SimpleEventHandler implements EventHandler {
    private Logger log;
    private String taskId;
    private long lastEventTime = System.currentTimeMillis(); // Variable to store the time of the last event received
    private long postInterval; // Time interval (in milliseconds) after which to send the POST request

    // Constructor with configurable postInterval
    public SimpleEventHandler(Logger log, String taskId, long postInterval){
        this.log = log;
        this.taskId = taskId;
        this.postInterval = postInterval;
    }

    public List<String> respList = new ArrayList<String>();

    public void onOpen() throws Exception{
        log.info("SSE Connection Opened");
    }

    public void onClosed() throws Exception{
        log.info("SSE Connection Closed");
    }

    public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
        // Log the time when each ping is generated
        long currentTime = System.currentTimeMillis();
        log.info("Ping generated at: " + currentTime);

        // Update the time of the last event received
        lastEventTime = currentTime;

        // Process the message event
        respList.add(messageEvent.getData());
        log.info("Received: "+ messageEvent.getData());

        // Check if it's time to send a POST request
        if (currentTime - lastEventTime >= postInterval) {
            sendPostRequest(taskId); // Send POST request if the specified time interval has elapsed
        }
    }

    public void onComment(String comment) throws Exception{
        log.info(comment);
    }

    public void onError(Throwable t){
        log.info("Error "+t);
    }

    // Method to generate a random UUID
    private String generateRandomUUID() {
        UUID uuid = UUID.randomUUID();
        return uuid.toString();
    }

    // Method to send the POST request
    private void sendPostRequest(String taskId) {
        // Implementation remains the same as before...
    }
}

// Rest of the code remains unchanged...
